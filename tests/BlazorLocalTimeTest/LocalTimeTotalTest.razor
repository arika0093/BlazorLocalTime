@using BlazorLocalTimeTest.Component
@using Shouldly
@inherits TestContext
@code {
    [Fact]
    public void TestTotal1()
    {
        var timeProvider = new MockTimeProvider(new(2023, 10, 1, 12, 34, 56, TimeSpan.Zero));
        Services.AddBlazorLocalTimeService(option => option.TimeProvider = timeProvider);
        Services.AddSingleton<TimeProvider>(timeProvider);
        TestInitializer.JavaScriptInitializer(JSInterop);

        var cut = RenderComponent<LocalTimeTotal1>();
        // 12:34+09:00 -> 2023-10-01 21:34:56
        cut.MarkupMatches("<p>2023-10-01 21:34:56</p>");
    }

    [Fact]
    public void TestTotalFailed1()
    {
        Services.AddBlazorLocalTimeService();
        Services.AddSingleton<TimeProvider>(TimeProvider.System);
        TestInitializer.JavaScriptInitializer(JSInterop);

        Should.Throw<InvalidOperationException>(() =>
        {
            // This test is expected to fail because BlazorLocalTimeProvider is not initialized
            RenderComponent<LocalTimeTotalFailed1>();
        });
    }

    [Fact]
    public void TestTotal2Success()
    {
        var timeProvider = new MockTimeProvider(new(2023, 10, 1, 12, 34, 56, TimeSpan.Zero));
        Services.AddBlazorLocalTimeService(option => option.TimeProvider = timeProvider);
        Services.AddSingleton<TimeProvider>(timeProvider);
        TestInitializer.JavaScriptInitializer(JSInterop);

        var cut = RenderComponent<LocalTimeTotal2>();
        // 12:34+09:00 -> 2023-10-01 21:34:56
        cut.MarkupMatches("2023-10-01 21:34:56");
    }

    [Fact]
    public void TestTotal2Error()
    {
        var timeProvider = new MockTimeProvider(new(2023, 10, 1, 12, 34, 56, TimeSpan.Zero));
        Services.AddBlazorLocalTimeService(option => option.TimeProvider = timeProvider);
        Services.AddSingleton<TimeProvider>(timeProvider);
        var module = JSInterop.SetupModule(BlazorLocalTimeProvider.JsPath);
        module.Setup<string>("getBrowserTimeZone").SetException(new JSException("error"));

        var cut = RenderComponent<LocalTimeTotal2>();
        cut.MarkupMatches("Error");
    }

}