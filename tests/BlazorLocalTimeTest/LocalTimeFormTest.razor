@using BlazorLocalTimeTest.Component
@using Shouldly
@inherits TestContext
@code
{
    [Fact]
    public void TestFormUpdated1()
    {
        Services.AddLocalTimeMockService();

        var dt = new DateTime(2023, 10, 1, 12, 30, 0, DateTimeKind.Utc);
        
        var cut = RenderComponent<LocalTimeFormSingle1>(parameters =>
            parameters.Bind(p => p.Value, dt, n => dt = n));
        var input = cut.Find("input[type='datetime-local']");
        
        // value is set to the local time in the input
        input.GetAttribute("value").ShouldBe("2023-10-01T21:30:00");
        
        // call update
        input.Change("2023-10-01T22:00:00");
        
        // value should be updated to the local time
        dt.ShouldBe(new DateTime(2023, 10, 1, 13, 00, 0, DateTimeKind.Utc));
    }
    
    [Fact]
    public void TestFormUpdated1Bind()
    {
        Services.AddLocalTimeMockService();

        var dt = new DateTime(2023, 10, 1, 12, 30, 0, DateTimeKind.Utc);
        
        var cut = Render(
            @<LocalTimeForm @bind-Value="dt" Context="dtf">
                <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="dtf.Value" />
            </LocalTimeForm>
        );
        var input = cut.Find("input[type='datetime-local']");
        
        // value is set to the local time in the input
        input.GetAttribute("value").ShouldBe("2023-10-01T21:30:00");
        
        // call update
        input.Change("2023-10-01T22:00:00");
        
        // value should be updated to the local time
        dt.ShouldBe(new DateTime(2023, 10, 1, 13, 00, 0, DateTimeKind.Utc));
    }
    
    [Fact]
    public void TestFormUpdated2()
    {
        Services.AddLocalTimeMockService();

        DateTime? dt = new DateTime(2023, 10, 1, 12, 30, 0, DateTimeKind.Utc);
        
        var cut = RenderComponent<LocalTimeFormSingle1>(parameters =>
            parameters.Bind(p => p.Value, dt.Value, n => dt = n));
        var input = cut.Find("input[type='datetime-local']");
        
        // value is set to the local time in the input
        input.GetAttribute("value").ShouldBe("2023-10-01T21:30:00");
        
        // call update
        input.Change("2023-10-01T22:00:00");
        
        // value should be updated to the local time
        dt.ShouldBe(new DateTime(2023, 10, 1, 13, 00, 0, DateTimeKind.Utc));
    }

    [Fact]
    public void TestFormUpdated3()
    {
        Services.AddLocalTimeMockService();

        var dt = new DateTimeOffset(2023, 10, 1, 12, 30, 0, TimeSpan.Zero);
        
        var cut = RenderComponent<LocalTimeFormSingle2>(parameters =>
            parameters.Bind(p => p.Value, dt, n => dt = n));
        var input = cut.Find("input[type='datetime-local']");
        
        // value is set to the local time in the input
        input.GetAttribute("value").ShouldBe("2023-10-01T21:30:00");
        
        // call update
        input.Change("2023-10-01T22:00:00");
        
        // value should be updated to the local time
        dt.ShouldBe(new DateTimeOffset(2023, 10, 1, 22, 00, 0, TimeSpan.FromHours(9)));
    }
    
    [Fact]
    public void TestFormOnlyDateUpdate()
    {
        // add a mock time provider to control the current time
        var mockTimeProvider = new MockTimeProvider(new(2023, 10, 1, 12, 34, 56, TimeSpan.Zero));
        Services.AddLocalTimeMockService(mockTimeProvider);

        DateTime? dt = null;
        
        var cut = Render(
            @<LocalTimeForm @bind-Value="dt" Context="dtf">
                <InputDate Type="InputDateType.Date" @bind-Value="dtf.Date" />
            </LocalTimeForm>
        );
        
        // update the date
        var input = cut.Find("input[type='date']");
        input.Change("2023-11-02");
        
        // the time should be set to the current time
        dt.ShouldBe(new DateTime(2023, 11, 2, 12, 34, 56, DateTimeKind.Utc));
    }
    
    [Fact]
    public void TestFormOnlyTimeUpdate()
    {
        // add a mock time provider to control the current time
        var mockTimeProvider = new MockTimeProvider(new(2023, 10, 1, 12, 34, 56, TimeSpan.Zero));
        Services.AddLocalTimeMockService(mockTimeProvider);

        DateTimeOffset? dt = null;
        
        var cut = Render(
            @<LocalTimeForm @bind-Value="dt" Context="dtf">
                <InputDate Type="InputDateType.Time" @bind-Value="dtf.Time" />
            </LocalTimeForm>
        );
        
        // update the time
        var input = cut.Find("input[type='time']");
        input.Change("01:45");
        
        // the date should be set to the current date
        dt.ShouldBe(new DateTimeOffset(2023, 10, 1, 1, 45, 0, TimeSpan.FromHours((9))));
    }
    
    [Fact]
    public void TestTimeZoneChangePreservesUiValue1()
    {
        Services.AddLocalTimeMockService();
        var localTimeService = Services.GetRequiredService<ILocalTimeService>();

        var dt = new DateTime(2023, 10, 1, 13, 00, 0, DateTimeKind.Utc);
        
        var cut = RenderComponent<LocalTimeFormSingle1>(parameters =>
            parameters.Bind(p => p.Value, dt, n => dt = n));
        
        var input = cut.Find("input[type='datetime-local']");
        
        // Change timezone to Blazil (UTC-3)
        localTimeService.OverrideTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("America/Sao_Paulo");
        cut.SetParametersAndRender(parameters => 
            parameters.Bind(p => p.Value, dt, n => dt = n));
        
        // The UI input should still show the same local time the user entered
        input.GetAttribute("value").ShouldBe("2023-10-01T22:00:00");
        
        // But the bound Value should be recalculated for the new timezone
        // 22:00 in São Paulo (UTC-3) is 01:00 in UTC the next day
        dt.ShouldBe(new DateTime(2023, 10, 2, 1, 00, 0, DateTimeKind.Utc));
    }
    
    [Fact]
    public void TestTimeZoneChangePreservesUiValue2()
    {
        Services.AddLocalTimeMockService();
        var localTimeService = Services.GetRequiredService<ILocalTimeService>();

        var dt = new DateTimeOffset(2023, 10, 1, 22, 00, 0, TimeSpan.FromHours(9));
        
        var cut = RenderComponent<LocalTimeFormSingle2>(parameters =>
            parameters.Bind(p => p.Value, dt, n => dt = n));
        
        var input = cut.Find("input[type='datetime-local']");
        
        // Change timezone to Blazil (UTC-3)
        localTimeService.OverrideTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("America/Sao_Paulo");
        cut.SetParametersAndRender(parameters => 
            parameters.Bind(p => p.Value, dt, n => dt = n));
        
        // The UI input should still show the same local time the user entered
        input.GetAttribute("value").ShouldBe("2023-10-01T22:00:00");
        
        // But the bound Value should be recalculated for the new timezone
        // 22:00 in São Paulo (UTC-3) is 01:00 in UTC the next day
        dt.ShouldBe(new DateTimeOffset(2023, 10, 1, 22, 00, 0, TimeSpan.FromHours(-3)));
    }
    
    
    [Fact]
    public void TestTimeZoneChangePreservesUiValue3()
    {
        Services.AddLocalTimeMockService();
        var localTimeService = Services.GetRequiredService<ILocalTimeService>();

        var dt = new DateTimeOffset(2025, 6, 26, 4, 55, 0, TimeSpan.FromHours(9));
        
        var cut = RenderComponent<LocalTimeFormSingle2>(parameters =>
            parameters.Bind(p => p.Value, dt, n => dt = n));
        
        var input = cut.Find("input[type='datetime-local']");
        
        // Change timezone to Vancouver (UTC-8) but use summer
        localTimeService.OverrideTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("America/Vancouver");
        cut.SetParametersAndRender(parameters => 
            parameters.Bind(p => p.Value, dt, n => dt = n));
        
        // The UI input should still show the same local time the user entered
        input.GetAttribute("value").ShouldBe("2025-06-26T04:55:00");
        
        // But the bound Value should be recalculated for the new timezone
        // 04:55 in Vancouver (UTC-7) is 11:55 in UTC
        dt.ShouldBe(new DateTimeOffset(2025, 6, 26, 11, 55, 0, TimeSpan.Zero));
    }
}