@inherits TestContext
@code
{
    // try NLS timezone detection
    // https://github.com/arika0093/BlazorLocalTime/issues/19
    [SkippableFact]
    public void TestLocalTimeProviderInNls()
    {
        // only windows
        Skip.IfNot(IsWindows(), $"Only Windows OS can run this test.");

        Services.AddBlazorLocalTimeService();
        TestInitializer.JavaScriptInitializer(JSInterop);

        Should.Throw<System.TimeZoneNotFoundException>(() =>
        {
            // cannot convert timezone from IANA to Windows
            Render(
                @<BlazorLocalTimeProvider />
            );
        });
    }

    // try NLS timezone detection with converter
    [SkippableFact]
    public void TestLocalTimeProviderInNlsWithConverter()
    {
        // only windows
        Skip.IfNot(IsWindows(), $"Only Windows OS can run this test.");

        Services.AddBlazorLocalTimeService(options =>
        {
            options.IanaToWindows = TimeZoneConverter.TZConvert.IanaToWindows;
        });
        TestInitializer.JavaScriptInitializer(JSInterop);

        // can convertable
        Render(
            @<BlazorLocalTimeProvider />
        );
    }

    private bool IsWindows() => OperatingSystem.IsWindows();
}

