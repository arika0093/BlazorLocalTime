@page "/"
@using BlazorLocalTime
@using AntDesign
@using Microsoft.FluentUI.AspNetCore.Components
@using MudBlazor

<PageTitle>BlazorLocalTime</PageTitle>

<h1>
    BlazorLocalTime
</h1>

<p>
    <code>BlazorLocalTime</code> provides functionality to convert <code>DateTime</code> values to the user's local time zone in Blazor applications.
</p>

<p>
    <a href="https://www.nuget.org/packages/BlazorLocalTime/" about="_blank">
        <img alt="NuGet Version" src="https://img.shields.io/nuget/v/BlazorLocalTime?style=for-the-badge&logo=NuGet&color=0080CC">
    </a>
</p>

<h2>What's this?</h2>
<p>
    Blazor applications often need to display dates and times in the user's local time zone. <br />
    However, if you use <code>DateTime</code> as it is, various processes will be performed in the time zone on the server.<br/>
    For example, the following code will not produce the expected output for many people (unless you live in an area with UTC+00:00!).
</p>

<pre><code class="language-razor">@@DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</code></pre>
<div class="component-sample">
    @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
</div>

<p>
    This package provides components and services to handle such conversions easily.
</p>

<h2>Setup</h2>
<p>Install <code>BlazorLocalTime</code> from NuGet:</p>
<pre><code>dotnet add package BlazorLocalTime
</code></pre>

<p>Next, register the service in your <code>Program.cs</code>:</p>
<pre><code class="language-csharp">builder.Services.AddBlazorLocalTimeService();
</code></pre>

<p>
    Finally, add the following component to <code>Routes.razor</code> (or <code>MainLayout.razor</code>, etc.):
</p>
<pre><code class="language-razor">@@using BlazorLocalTime
&lt;BlazorLocalTimeProvider /&gt;
</code></pre>

<h2>Using as a Component</h2>
<h3>Displaying Local Time</h3>
<p>
    To display a local time with semantic HTML, use the <code>LocalTimeText</code> component. By default, it wraps the output in an HTML <code>&lt;time&gt;</code> element with proper datetime attribute for accessibility.
    If you need just the text without the <code>&lt;time&gt;</code> element wrapper, you can disable it using the <code>DisableTimeElement</code> parameter.
</p>

<pre><code class="language-razor">&lt;LocalTimeText Value="@@DateTime.UtcNow" Format="yyyy-MM-dd HH:mm:ssK" /&gt;
&lt;!-- should output something like this: 
&lt;time datetime="2025-06-30T17:45:27.4610000Z"&gt;2025-07-01 02:45:27+09:00&lt;/time&gt;  
--&gt;
</code></pre>

<div class="component-sample">
    <LocalTimeText Value="@DateTime.UtcNow" Format="yyyy-MM-dd HH:mm:ssK" />
</div>

<p>
    Alternatively, you can use the <code>LocalTime</code> component to receive the converted value in the child content:
</p>
<pre><code class="language-razor">&lt;LocalTime Value="@@DateTime.UtcNow" Context="dt"&gt;
    @@dt.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;/LocalTime&gt;
</code></pre>

<div class="component-sample">
    <LocalTime Value="@DateTime.UtcNow" Context="dt">
        @dt.ToString("yyyy-MM-dd HH:mm:ssK")
    </LocalTime>
</div>

<p>
    If you want to use <code>TimeZoneInfo</code>, you can use the <code>LocalTimeZone</code> component:
</p>
<pre><code class="language-razor">Server Time Zone: @@TimeZoneInfo.Local.DisplayName
&lt;br /&gt;
&lt;LocalTimeZone Context="tz"&gt;
    Display Time Zone: @@tz.DisplayName
&lt;/LocalTimeZone&gt;
</code></pre>

<div class="component-sample">
    Server Time Zone: @TimeZoneInfo.Local.DisplayName
    <br/>
    <LocalTimeZone Context="tz">
        Display Time Zone: @tz.DisplayName
    </LocalTimeZone>
</div>

<h3>Input Forms</h3>
<p>
    For input forms, it is common to display values in local time and save them as UTC.<br />
    You can easily create such forms using the <code>LocalTimeForm</code> component:
</p>
<pre><code class="language-razor">Value: @@Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;br /&gt;
&lt;LocalTimeForm @@bind-Value="Dt" Context="dtf"&gt;
    &lt;InputDate Type="InputDateType.DateTimeLocal" @@bind-Value="dtf.Value" /&gt;
&lt;/LocalTimeForm&gt;

@@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
}
</code></pre>

<div class="component-sample">
    Value: @Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
    <br />
    <LocalTimeForm @bind-Value="Dt" Context="dtf">
        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="dtf.Value" />
    </LocalTimeForm>
</div>

<p>Input forms also support separate date and time inputs:</p>
<pre><code class="language-razor">Value: @@Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;br /&gt;
&lt;LocalTimeForm @@bind-Value="Dt" Context="dtf"&gt;
    &lt;InputDate Type="InputDateType.Date" @@bind-Value="dtf.Date" /&gt;
    &lt;InputDate Type="InputDateType.Time" @@bind-Value="dtf.Time" /&gt;
&lt;/LocalTimeForm&gt;

@@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
}
</code></pre>

<div class="component-sample">
    Value: @Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
    <br />
    <LocalTimeForm @bind-Value="Dt" Context="dtf">
        <InputDate Type="InputDateType.Date" @bind-Value="dtf.Date" />
        <InputDate Type="InputDateType.Time" @bind-Value="dtf.Time" />
    </LocalTimeForm>
</div>

<p>
    If you want to use non-nullable components or create a form that sets the current date and time as the initial value,
    you can use the <code>ValueOrNow</code>, <code>DateOrToday</code> and <code>TimeOrNow</code> properties.
</p>
<pre><code class="language-razor">Value: @@(Dt?.ToString("yyyy-MM-dd HH:mm:ssK") ?? "Not specified yet")
&lt;br /&gt;
&lt;LocalTimeForm @@bind-Value="Dt" Context="dtf"&gt;
    &lt;InputDate Type="InputDateType.DateTimeLocal" @@bind-Value="dtf.ValueOrNow" /&gt;
    &lt;InputDate Type="InputDateType.Date" @@bind-Value="dtf.DateOrToday" /&gt;
    &lt;InputDate Type="InputDateType.Time" @@bind-Value="dtf.TimeOrNow" /&gt;
    &lt;button @@onclick="() =&gt; Dt = null"&gt;Reset&lt;/button&gt;
&lt;/LocalTimeForm&gt;

@@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
}
</code></pre>

<div class="component-sample">
    Value: @(Dt2?.ToString("yyyy-MM-dd HH:mm:ssK") ?? "Not specified yet")
    <br />
    <LocalTimeForm @bind-Value="Dt2" Context="dtf">
        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="dtf.ValueOrNow" />
        <InputDate Type="InputDateType.Date" @bind-Value="dtf.DateOrToday" />
        <InputDate Type="InputDateType.Time" @bind-Value="dtf.TimeOrNow" />
        <button @onclick="() => Dt2 = null">Reset</button>
    </LocalTimeForm>
</div>

<h2>Using with UI Libraries</h2>

<p>
    The <code>LocalTimeForm</code> component can be used with various UI libraries to create forms that handle local time input. Below are examples using
    <a href="https://mudblazor.com/" about="_blank">MudBlazor</a>,
    <a href="https://www.fluentui-blazor.net" about="_blank">Fluent UI</a>, and
    <a href="https://antblazor.com/" about="_blank">Ant Design Blazor</a> components.
</p>


<h3>MudBlazor</h3>

<pre><code class="language-razor">Value: @@Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;br /&gt;
&lt;LocalTimeForm @@bind-Value="Dt" Context="dtf"&gt;
    &lt;MudDatePicker Label="Date" @@bind-Date="dtf.Value" ShowToolbar="false" /&gt;
    &lt;MudTimePicker Label="Time" @@bind-Time="dtf.TimeSpan" ShowToolbar="false" /&gt;
&lt;/LocalTimeForm&gt;

@@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
}
</code></pre>

<div class="component-sample">
    Value: @Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
    <br />
    <LocalTimeForm @bind-Value="Dt" Context="dtf">
        <MudDatePicker Label="Date" @bind-Date="dtf.Value" ShowToolbar="false" />
        <MudTimePicker Label="Time" @bind-Time="dtf.TimeSpan" ShowToolbar="false" />
    </LocalTimeForm>
</div>

<h3>Fluent UI</h3>

<pre><code class="language-razor">Value: @@Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;br /&gt;
&lt;LocalTimeForm @@bind-Value="Dt" Context="dtf"&gt;
    &lt;FluentDatePicker Label="Date" @@bind-Value="dtf.Value" /&gt;
    &lt;FluentTimePicker Label="Time" @@bind-Value="dtf.Value" /&gt;
&lt;/LocalTimeForm&gt;

@@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
}
</code></pre>

<div class="component-sample">
    Value: @Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
    <br />
    <LocalTimeForm @bind-Value="Dt" Context="dtf">
        <FluentDatePicker Label="Date" @bind-Value="dtf.Value" />
        <FluentTimePicker Label="Time" @bind-Value="dtf.Value" />
    </LocalTimeForm>
</div>

<h3>Ant Design Blazor</h3>

<p>
    Due to implementation limitations, the <code>Today</code> and <code>Now</code> buttons reference the server-side current time and do not work as expected. <br/>
    Therefore, it is recommended to hide these buttons.
</p>

<pre><code class="language-razor">Value: @@Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;br /&gt;
&lt;LocalTimeForm @@bind-Value="Dt" Context="dtf"&gt;
    &lt;DatePicker TValue="DateTime?" @@bind-Value="dtf.Value" ShowTime="@@true" /&gt;
    &lt;br /&gt;
    &lt;DatePicker TValue="DateOnly?" @@bind-Value="dtf.Date" /&gt;
    &lt;TimePicker TValue="TimeOnly?" @@bind-Value="dtf.Time" /&gt;
&lt;/LocalTimeForm&gt;

&lt;style&gt;
    /* Hide "Today" and "Now" buttons */
    a.ant-picker-now-btn, a.ant-picker-today-btn {
        display: none;
    }
&lt;/style&gt;

@@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
}
</code></pre>

<div class="component-sample">
    Value: @Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
    <br />
    <LocalTimeForm @bind-Value="Dt" Context="dtf">
        <DatePicker TValue="DateTime?" @bind-Value="dtf.Value" ShowTime="@true" />
        <br/>
        <DatePicker TValue="DateOnly?" @bind-Value="dtf.Date" />
        <TimePicker TValue="TimeOnly?" @bind-Value="dtf.Time" />
    </LocalTimeForm>
    
    <style>
        a.ant-picker-now-btn, a.ant-picker-today-btn {
            display: none;
        }
    </style>
</div>

<h2>Using as a Service</h2>
<p>
    You can also use <code>ILocalTimeService</code> to convert values in your code:
</p>
<pre><code class="language-razor">&lt;input type="button" value="Update" @@onclick="ButtonClicked" /&gt;
&lt;br /&gt;
@@LocalDt?.ToString("yyyy-MM-dd HH:mm:ss")

@@inject ILocalTimeService LocalTimeService
@@code {
    private DateTimeOffset? LocalDt { get; set; }
    private void ButtonClicked()
    {
        LocalDt = LocalTimeService.ToLocalTimeOffset(DateTime.UtcNow);
        // or shorthand
        // LocalDt = LocalTimeService.Now;
    }
}
</code></pre>

<div class="component-sample">
    <input type="button" value="Update" @onclick="ButtonClicked" />
    <br/>
    @LocalDt?.ToString("yyyy-MM-dd HH:mm:ss")
</div>

<h2>Overriding Time Zone</h2>
<p>
    You can programmatically override the browser's detected time zone using <code>OverrideTimeZoneInfo</code>. 
    This is useful for testing different time zones or allowing users to select their preferred time zone.
</p>

<pre><code class="language-razor">&lt;select @@onchange="OnTimeZoneChanged"&gt;
    &lt;option value=""&gt;-- Use Browser Time Zone --&lt;/option&gt;
    @@foreach (var tz in TimeZoneInfo.GetSystemTimeZones())
    {
        &lt;option value="@@tz.Id"&gt;@@tz.DisplayName&lt;/option&gt;
    }
&lt;/select&gt;
&lt;br/&gt;
Current Time: &lt;LocalTimeText Value="@@DateTime.UtcNow" Format="yyyy-MM-dd HH:mm:ssK" /&gt;

@@inject ILocalTimeService LocalTimeService
@@code {
    private void OnTimeZoneChanged(ChangeEventArgs e)
    {
        var timeZoneId = e.Value?.ToString();
        LocalTimeService.OverrideTimeZoneInfo = !string.IsNullOrEmpty(timeZoneId)
            ? TimeZoneInfo.FindSystemTimeZoneById(timeZoneId)
            : null;
    }
}
</code></pre>

<div class="component-sample">
    <label>Select Time Zone:</label>
    <select @onchange="OnTimeZoneChanged" style="width: 400px; padding: 1ex; margin: 5px 0; border: 1px solid #DDD;">
        <option value="">-- Use Browser Time Zone --</option>
        @foreach (var tz in TimeZoneInfo.GetSystemTimeZones())
        {
            <option value="@tz.Id">@tz.DisplayName</option>
        }
    </select>
    <br/>
    Current Time: <LocalTimeText Value="@DateTime.UtcNow" Format="yyyy-MM-dd HH:mm:ssK" />
</div>


<div class="blank"></div>

@inject ILocalTimeService LocalTimeService
@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
    private DateTime? Dt2 { get; set; }

    private DateTimeOffset? LocalDt { get; set; }
    private void ButtonClicked()
    {
        LocalDt = LocalTimeService.Now;
    }

    private void OnTimeZoneChanged(ChangeEventArgs e)
    {
        var timeZoneId = e.Value?.ToString();
        LocalTimeService.OverrideTimeZoneInfo = !string.IsNullOrEmpty(timeZoneId)
            ? TimeZoneInfo.FindSystemTimeZoneById(timeZoneId)
            : null;
    }
}
