@page "/"
@using BlazorLocalTime
@using AntDesign
@using Microsoft.FluentUI.AspNetCore.Components
@using MudBlazor

<PageTitle>BlazorLocalTime</PageTitle>

<h1>
    BlazorLocalTime
</h1>

<p>
    <code>BlazorLocalTime</code> provides functionality to convert <code>DateTime</code> values to the user's local time zone in Blazor applications.
</p>

<p>
    <a href="https://www.nuget.org/packages/BlazorLocalTime/" about="_blank">
        <img alt="NuGet Version" src="https://img.shields.io/nuget/v/BlazorLocalTime?style=for-the-badge&logo=NuGet&color=0080CC">
    </a>
</p>

<h2>Installation</h2>
<p>Install <code>BlazorLocalTime</code> from NuGet:</p>
<pre><code>dotnet add package BlazorLocalTime
</code></pre>

<p>Next, register the service in your <code>Program.cs</code>:</p>
<pre><code class="language-csharp">builder.Services.AddBlazorLocalTimeService();
</code></pre>

<p>
    Finally, add the following component to <code>Routes.razor</code> (or <code>MainLayout.razor</code>, etc.):
</p>
<pre><code class="language-razor">@@using BlazorLocalTime
&lt;BlazorLocalTimeProvider /&gt;
</code></pre>

<h2>Using as a Component</h2>
<p>To simply display a local time as text, use the <code>LocalTimeText</code> component:</p>
<pre><code class="language-razor">&lt;LocalTimeText Value="@@DateTime.UtcNow" Format="yyyy-MM-dd HH:mm:ssK" /&gt;
</code></pre>

<div class="component-sample">
    <LocalTimeText Value="@DateTime.UtcNow" Format="yyyy-MM-dd HH:mm:ssK" />
</div>

<p>
    Alternatively, you can use the <code>LocalTime</code> component to receive the converted value in the child content:
</p>
<pre><code class="language-razor">&lt;LocalTime Value="@@DateTime.UtcNow" Context="dt"&gt;
    @@dt.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;/LocalTime&gt;
</code></pre>

<div class="component-sample">
    <LocalTime Value="@DateTime.UtcNow" Context="dt">
        @dt.ToString("yyyy-MM-dd HH:mm:ssK")
    </LocalTime>
</div>

<p>
    If you want to use <code>TimeZoneInfo</code>, you can use the <code>LocalTimeZone</code> component:
</p>
<pre><code class="language-razor">&lt;LocalTimeZone Context="tz"&gt;
    Current Time Zone: @@tz.DisplayName
&lt;/LocalTimeZone&gt;
</code></pre>

<div class="component-sample">
    <LocalTimeZone Context="tz">
        Current Time Zone: @tz.DisplayName
    </LocalTimeZone>
</div>

<p>
    For input forms, it is common to display values in local time and save them as UTC.<br />
    You can easily create such forms using the <code>LocalTimeForm</code> component:
</p>
<pre><code class="language-razor">Value: @@Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;br /&gt;
&lt;LocalTimeForm @@bind-Value="Dt" Context="dtf"&gt;
    &lt;InputDate Type="InputDateType.DateTimeLocal" @@bind-Value="dtf.Value" /&gt;
&lt;/LocalTimeForm&gt;

@@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
}
</code></pre>

<div class="component-sample">
    Value: @Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
    <br />
    <LocalTimeForm @bind-Value="Dt" Context="dtf">
        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="dtf.Value" />
    </LocalTimeForm>
</div>

<p>Input forms also support separate date and time inputs:</p>
<pre><code class="language-razor">Value: @@Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;br /&gt;
&lt;LocalTimeForm @@bind-Value="Dt" Context="dtf"&gt;
    &lt;InputDate Type="InputDateType.Date" @@bind-Value="dtf.Date" /&gt;
    &lt;InputDate Type="InputDateType.Time" @@bind-Value="dtf.Time" /&gt;
&lt;/LocalTimeForm&gt;

@@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
}
</code></pre>

<div class="component-sample">
    Value: @Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
    <br />
    <LocalTimeForm @bind-Value="Dt" Context="dtf">
        <InputDate Type="InputDateType.Date" @bind-Value="dtf.Date" />
        <InputDate Type="InputDateType.Time" @bind-Value="dtf.Time" />
    </LocalTimeForm>
</div>

<h2>Using with UI Libraries</h2>

<p>
    The <code>LocalTimeForm</code> component can be used with various UI libraries to create forms that handle local time input. Below are examples using
    <a href="https://mudblazor.com/" about="_blank">MudBlazor</a>,
    <a href="https://www.fluentui-blazor.net" about="_blank">Fluent UI</a>, and
    <a href="https://antblazor.com/" about="_blank">Ant Design Blazor</a> components.
</p>


<h3>MudBlazor</h3>

<pre><code class="language-razor">Value: @@Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;br /&gt;
&lt;LocalTimeForm @@bind-Value="Dt" Context="dtf"&gt;
    &lt;MudDatePicker Label="Date" @@bind-Date="dtf.Value" ShowToolbar="false" /&gt;
    &lt;MudTimePicker Label="Time" @@bind-Time="dtf.TimeSpan" ShowToolbar="false" /&gt;
&lt;/LocalTimeForm&gt;

@@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
}
</code></pre>

<div class="component-sample">
    Value: @Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
    <br />
    <LocalTimeForm @bind-Value="Dt" Context="dtf">
        <MudDatePicker Label="Date" @bind-Date="dtf.Value" ShowToolbar="false" />
        <MudTimePicker Label="Time" @bind-Time="dtf.TimeSpan" ShowToolbar="false" />
    </LocalTimeForm>
</div>

<h3>Fluent UI</h3>

<pre><code class="language-razor">Value: @@Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;br /&gt;
&lt;LocalTimeForm @@bind-Value="Dt" Context="dtf"&gt;
    &lt;FluentDatePicker Label="Date" @@bind-Value="dtf.Value" /&gt;
    &lt;FluentTimePicker Label="Time" @@bind-Value="dtf.Value" /&gt;
&lt;/LocalTimeForm&gt;

@@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
}
</code></pre>

<div class="component-sample">
    Value: @Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
    <br />
    <LocalTimeForm @bind-Value="Dt" Context="dtf">
        <FluentDatePicker Label="Date" @bind-Value="dtf.Value" />
        <FluentTimePicker Label="Time" @bind-Value="dtf.Value" />
    </LocalTimeForm>
</div>

<h3>Ant Design Blazor</h3>

<pre><code class="language-razor">Value: @@Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
&lt;br /&gt;
&lt;LocalTimeForm @@bind-Value="Dt" Context="dtf"&gt;
    &lt;DatePicker TValue="DateTime?" @@bind-Value="dtf.Value" ShowTime="@@true" /&gt;
    &lt;br /&gt;
    &lt;DatePicker TValue="DateOnly?" @@bind-Value="dtf.Date" /&gt;
    &lt;TimePicker TValue="TimeOnly?" @@bind-Value="dtf.Time" /&gt;
&lt;/LocalTimeForm&gt;

@@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;
}
</code></pre>

<div class="component-sample">
    Value: @Dt?.ToString("yyyy-MM-dd HH:mm:ssK")
    <br />
    <LocalTimeForm @bind-Value="Dt" Context="dtf">
        <DatePicker TValue="DateTime?" @bind-Value="dtf.Value" ShowTime="@true" />
        <br/>
        <DatePicker TValue="DateOnly?" @bind-Value="dtf.Date" />
        <TimePicker TValue="TimeOnly?" @bind-Value="dtf.Time" />
    </LocalTimeForm>
</div>

<h2>Using as a Service</h2>
<p>
    You can also use <code>ILocalTimeService</code> to convert values in your code:
</p>
<pre><code class="language-razor">&lt;input type="button" value="Update" @@onclick="ButtonClicked" /&gt;
&lt;br /&gt;
@@LocalDt?.ToString("yyyy-MM-dd HH:mm:ss")

@@inject ILocalTimeService LocalTimeService
@@code {
    private DateTime? LocalDt { get; set; }
    private void ButtonClicked()
    {
        LocalDt = LocalTimeService.ToLocalTime(DateTime.UtcNow);
        // DateTimeOffset version:
        // LocalOffset = LocalTimeService.ToLocalTimeOffset(DateTime.UtcNow);
    }
}
</code></pre>

<div class="component-sample">
    <input type="button" value="Update" @onclick="ButtonClicked" />
    <br/>
    @LocalDt?.ToString("yyyy-MM-dd HH:mm:ss")
</div>

<div class="blank"></div>

@inject ILocalTimeService LocalTimeService
@code {
    private DateTime? Dt { get; set; } = DateTime.UtcNow;

    private DateTime? LocalDt { get; set; }
    private void ButtonClicked()
    {
        LocalDt = LocalTimeService.ToLocalTime(DateTime.UtcNow);
    }
}
